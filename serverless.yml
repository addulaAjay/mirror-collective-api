service: mirror-collective-api
frameworkVersion: '^4.0.0'

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'staging'}
  region: ${opt:region, 'us-east-1'}
  memorySize: 512
  timeout: 30
  environment:
    NODE_ENV: ${self:provider.stage}
    API_VERSION: v1
    # Add other environment variables from your .env file
    ALLOWED_ORIGINS: ${env:ALLOWED_ORIGINS, 'https://your-frontend-domain.com'}

  # IAM Role for Lambda functions
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource:
            - 'arn:aws:logs:${self:provider.region}:*:log-group:/aws/lambda/*:*:*'
        # Add additional permissions as needed for your API
        # - Effect: Allow
        #   Action:
        #     - dynamodb:Query
        #     - dynamodb:Scan
        #     - dynamodb:GetItem
        #     - dynamodb:PutItem
        #     - dynamodb:UpdateItem
        #     - dynamodb:DeleteItem
        #   Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/*"

  # API Gateway configuration
  apiGateway:
    shouldStartNameWithService: true
    binaryMediaTypes:
      - 'multipart/form-data'
      - 'application/octet-stream'

functions:
  auth:
    handler: dist/auth-lambda.handler
    memorySize: 256 # Lower memory for auth operations
    timeout: 15 # Shorter timeout for auth
    events:
      - http:
          path: /api/auth/{proxy+}
          method: ANY
          cors:
            origin: ${env:ALLOWED_ORIGINS, 'https://your-frontend-domain.com'}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
      - http:
          path: /api/auth
          method: ANY
          cors:
            origin: ${env:ALLOWED_ORIGINS, 'https://your-frontend-domain.com'}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true

  chat:
    handler: dist/chat-lambda.handler
    memorySize: 1024 # Higher memory for AI processing
    timeout: 60 # Longer timeout for AI responses
    events:
      - http:
          path: /api/chat/{proxy+}
          method: ANY
          cors:
            origin: ${env:ALLOWED_ORIGINS, 'https://your-frontend-domain.com'}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
      - http:
          path: /api/chat
          method: ANY
          cors:
            origin: ${env:ALLOWED_ORIGINS, 'https://your-frontend-domain.com'}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true

plugins:
  - serverless-offline

custom:
  serverless-offline:
    httpPort: 3001
    host: 0.0.0.0
    stage: local
    prefix: ''

# Package configuration
package:
  patterns:
    - '!src/**'
    - '!tests/**'
    - '!.github/**'
    - '!*.md'
    - '!*.json'
    - '!*.yml'
    - 'dist/**'
    - 'package.json'
    - 'node_modules/**'
  excludeDevDependencies: true

# CloudFormation resources
resources:
  Resources:
    # Custom domain configuration (optional)
    # ApiGatewayDomainName:
    #   Type: AWS::ApiGateway::DomainName
    #   Properties:
    #     DomainName: api.yourdomain.com
    #     CertificateArn: arn:aws:acm:us-east-1:ACCOUNT:certificate/CERT-ID

    # CloudWatch Log Group
    ApiLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/${self:service}-${self:provider.stage}-api
        RetentionInDays: 14

  Outputs:
    ApiGatewayRestApiId:
      Value:
        Ref: ApiGatewayRestApi
      Export:
        Name: ${self:service}-${self:provider.stage}-restApiId

    ApiGatewayRestApiRootResourceId:
      Value:
        Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
      Export:
        Name: ${self:service}-${self:provider.stage}-rootResourceId
